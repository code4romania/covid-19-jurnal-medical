on:
  push:
    branches:
      - develop
      - master

name: Deploy

env:
  IMAGE_IDENTITYSERVER: ${{ secrets.DOCKER_HUB_ORGANIZATION }}/stamacasa-identityserver
  IMAGE_API: ${{ secrets.DOCKER_HUB_ORGANIZATION }}/stamacasa-api
  IMAGE_FRONTEND: ${{ secrets.DOCKER_HUB_ORGANIZATION }}/stamacasa-frontend
  IMAGE_POSTGRES: ${{ secrets.DOCKER_HUB_ORGANIZATION }}/stamacasa-postgres
  IMAGE_EMAILSERVICE: ${{ secrets.DOCKER_HUB_ORGANIZATION }}/stamacasa-emailservice
  IMAGE_JOBSCHEDULER: ${{ secrets.DOCKER_HUB_ORGANIZATION }}/stamacasa-jobscheduler
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-identityserver:
    name: Build Identityserver container
    runs-on: ubuntu-latest

    steps:
      - name: Checkoout
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          cd backend/src/StamAcasa.IdentityServer
          docker build . \
            --tag $IMAGE_IDENTITYSERVER:$GITHUB_SHA \
            --file Dockerfile
      - name: Upload Docker image
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
        run: |
          echo ${{ secrets.DOCKER_HUB_PASSWORD }} | \
          docker login \
            -u ${{ secrets.DOCKER_HUB_USERNAME }} \
            --password-stdin
          docker push $IMAGE_IDENTITYSERVER:$GITHUB_SHA
      - name: Tag Staging
        if: github.ref == 'refs/heads/develop'
        run: |
          docker tag \
            $IMAGE_IDENTITYSERVER:$GITHUB_SHA \
            $IMAGE_IDENTITYSERVER:staging
          docker push $IMAGE_IDENTITYSERVER:staging

      - name: Tag Latest
        if: github.ref == 'refs/heads/master'
        run: |
          docker tag \
            $IMAGE_IDENTITYSERVER:$GITHUB_SHA \
            $IMAGE_IDENTITYSERVER:latest
          docker push $IMAGE_IDENTITYSERVER:latest

  build-api:
    name: Build API container
    runs-on: ubuntu-latest

    steps:
      - name: Checkoout
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          cd backend/src/StamAcasa.API
          docker build . \
            --tag $IMAGE_API:$GITHUB_SHA \
            --file Dockerfile
      - name: Upload Docker image
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
        run: |
          echo ${{ secrets.DOCKER_HUB_PASSWORD }} | \
          docker login \
            -u ${{ secrets.DOCKER_HUB_USERNAME }} \
            --password-stdin
          docker push $IMAGE_API:$GITHUB_SHA
      - name: Tag Staging
        if: github.ref == 'refs/heads/develop'
        run: |
          docker tag \
            $IMAGE_API:$GITHUB_SHA \
            $IMAGE_API:staging
          docker push $IMAGE_API:staging

      - name: Tag Latest
        if: github.ref == 'refs/heads/master'
        run: |
          docker tag \
            $IMAGE_API:$GITHUB_SHA \
            $IMAGE_API:latest
          docker push $IMAGE_API:latest

  build-emailservice:
    name: Build Emailservice container
    runs-on: ubuntu-latest

    steps:
      - name: Checkoout
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          cd backend/src/StamAcasa.EmailService
          docker build . \
            --tag $IMAGE_EMAILSERVICE:$GITHUB_SHA \
            --file Dockerfile
      - name: Upload Docker image
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
        run: |
          echo ${{ secrets.DOCKER_HUB_PASSWORD }} | \
          docker login \
            -u ${{ secrets.DOCKER_HUB_USERNAME }} \
            --password-stdin
          docker push $IMAGE_EMAILSERVICE:$GITHUB_SHA
      - name: Tag Staging
        if: github.ref == 'refs/heads/develop'
        run: |
          docker tag \
            $IMAGE_EMAILSERVICE:$GITHUB_SHA \
            $IMAGE_EMAILSERVICE:staging
          docker push $IMAGE_EMAILSERVICE:staging

      - name: Tag Latest
        if: github.ref == 'refs/heads/master'
        run: |
          docker tag \
            $IMAGE_EMAILSERVICE:$GITHUB_SHA \
            $IMAGE_EMAILSERVICE:latest
          docker push $IMAGE_EMAILSERVICE:latest

  build-jobscheduler:
    name: Build JobScheduler container
    runs-on: ubuntu-latest

    steps:
      - name: Checkoout
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          cd backend/src/StamAcasa.JobScheduler
          docker build . \
            --tag $IMAGE_JOBSCHEDULER:$GITHUB_SHA \
            --file Dockerfile
      - name: Upload Docker image
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
        run: |
          echo ${{ secrets.DOCKER_HUB_PASSWORD }} | \
          docker login \
            -u ${{ secrets.DOCKER_HUB_USERNAME }} \
            --password-stdin
          docker push $IMAGE_JOBSCHEDULER:$GITHUB_SHA
      - name: Tag Staging
        if: github.ref == 'refs/heads/develop'
        run: |
          docker tag \
            $IMAGE_JOBSCHEDULER:$GITHUB_SHA \
            $IMAGE_JOBSCHEDULER:staging
          docker push $IMAGE_JOBSCHEDULER:staging

      - name: Tag Latest
        if: github.ref == 'refs/heads/master'
        run: |
          docker tag \
            $IMAGE_JOBSCHEDULER:$GITHUB_SHA \
            $IMAGE_JOBSCHEDULER:latest
          docker push $IMAGE_JOBSCHEDULER:latest   

  build-frontend:
    name: Build FrontEnd container
    runs-on: ubuntu-latest

    steps:
      - name: Checkoout
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          cd frontend
          docker build . \
            --tag $IMAGE_FRONTEND:$GITHUB_SHA
            --file Dockerfile
      - name: Upload Docker image
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
        run: |
          echo ${{ secrets.DOCKER_HUB_PASSWORD }} | \
          docker login \
            -u ${{ secrets.DOCKER_HUB_USERNAME }} \
            --password-stdin
          docker push $IMAGE_FRONTEND:$GITHUB_SHA
      - name: Tag Staging
        if: github.ref == 'refs/heads/develop'
        run: |
          docker tag \
            $IMAGE_FRONTEND:$GITHUB_SHA \
            $IMAGE_FRONTEND:staging
          docker push $IMAGE_FRONTEND:staging

      - name: Tag Latest
        if: github.ref == 'refs/heads/master'
        run: |
          docker tag \
            $IMAGE_FRONTEND:$GITHUB_SHA \
            $IMAGE_FRONTEND:latest
          docker push $IMAGE_FRONTEND:latest

  deploy:
    name: Prepare Infrastructure
    runs-on: ubuntu-latest
    needs: [build-identityserver, build-jobscheduler, build-api, build-frontend, build-emailservice]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set env to staging
        if: endsWith(github.ref, '/develop')
        run: |
          echo "::set-env name=TF_WORKSPACE::staging"
      - name: Set env to production
        if: endsWith(github.ref, '/master')
        run: |
          echo "::set-env name=TF_WORKSPACE::production"

      - name: Check environment
        run: |
          echo "Deploying to environment «$TF_WORKSPACE»"

      - name: "Prep TF Vars"
        run: |
          cat << EOF > aws_deploy/github.tfvars
          IMAGE_FRONTEND = "$IMAGE_FRONTEND:$GITHUB_SHA"
          IMAGE_API      = "$IMAGE_API:$GITHUB_SHA"
          IMAGE_IDENTITYSERVER  = "$IMAGE_IDENTITYSERVER:$GITHUB_SHA"
          IMAGE_EMAILSERVICE = "$IMAGE_EMAILSERVICE:$GITHUB_SHA"
          IMAGE_JOBSCHEDULER = "$IMAGE_JOBSCHEDULER:$GITHUB_SHA"
          IMAGE_POSTGRES = "POSTGRES          
          EOF
          cat aws_deploy/github.tfvars

      - name: "Terraform Init"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.23
          tf_actions_subcommand: "init"
          tf_actions_working_dir: "aws_deploy"
          tf_actions_comment: false
      - name: "Terraform Plan"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.23
          tf_actions_subcommand: "plan"
          tf_actions_working_dir: "aws_deploy"
          tf_actions_comment: false
          args: "--var-file github.tfvars"
      - name: "Terraform Apply"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.23
          tf_actions_subcommand: "apply"
          tf_actions_working_dir: "aws_deploy"
          tf_actions_comment: false
          args: "--var-file github.tfvars"